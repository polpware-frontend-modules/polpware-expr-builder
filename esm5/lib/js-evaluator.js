import { safeParseBool, safeParseFloat, safeParseInt, safeParseString, tyBool, tyDate, tyNumber } from '@polpware/fe-utilities';
import { OperatorEnum } from './binary-operators';
/**
 * Computes the type safe value in Javascript.
 * @param value
 * @param valueType
 */
export function getTypeSafeValue(value, valueType) {
    if (valueType == tyBool) {
        value = safeParseBool(value);
    }
    else if (valueType == tyNumber) {
        value = safeParseFloat(value);
    }
    else if (valueType == tyDate) {
        value = safeParseString(value);
        value = Date.parse(value);
    }
    else { // string 
        value = safeParseString(value);
    }
    return value;
}
/**
 * Evalutes the given assertion if it holds.
 * @param value
 * @param op
 * @param ty
 * @param expected
 */
export function evaluateAssertion(value, op, ty, expected) {
    op = safeParseInt(op);
    var s = false;
    switch (op) {
        case OperatorEnum.LessThan:
            s = getTypeSafeValue(value, ty) < getTypeSafeValue(expected, ty);
            break;
        case OperatorEnum.LessThanEqual:
            s = getTypeSafeValue(value, ty) <= getTypeSafeValue(expected, ty);
            break;
        case OperatorEnum.Equal:
            s = getTypeSafeValue(value, ty) == getTypeSafeValue(expected, ty);
            break;
        case OperatorEnum.NotEqual:
            s = getTypeSafeValue(value, ty) != getTypeSafeValue(expected, ty);
            break;
        case OperatorEnum.GreaterThan:
            s = getTypeSafeValue(value, ty) > getTypeSafeValue(expected, ty);
            break;
        case OperatorEnum.GreaterThanEqual:
            s = getTypeSafeValue(value, ty) >= getTypeSafeValue(expected, ty);
            break;
        case OperatorEnum.Contain:
            s = getTypeSafeValue(value, ty).indexOf(getTypeSafeValue(expected, ty)) != -1;
            break;
        case OperatorEnum.NotContain:
            s = getTypeSafeValue(value, ty).indexOf(getTypeSafeValue(expected, ty)) == -1;
            break;
        case OperatorEnum.StartWith:
            s = getTypeSafeValue(value, ty).startsWith(getTypeSafeValue(expected, ty));
            break;
        case OperatorEnum.EndWith:
            s = getTypeSafeValue(value, ty).endsWith(getTypeSafeValue(expected, ty));
            break;
        default:
            break;
    }
    return s;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianMtZXZhbHVhdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvbHB3YXJlL2V4cHItYnVpbGRlci8iLCJzb3VyY2VzIjpbImxpYi9qcy1ldmFsdWF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFZLGFBQWEsRUFBRSxjQUFjLEVBQUUsWUFBWSxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzFJLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUdsRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLGdCQUFnQixDQUFDLEtBQVUsRUFBRSxTQUFtQjtJQUM1RCxJQUFJLFNBQVMsSUFBSSxNQUFNLEVBQUU7UUFDckIsS0FBSyxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNoQztTQUFNLElBQUksU0FBUyxJQUFJLFFBQVEsRUFBRTtRQUM5QixLQUFLLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ2pDO1NBQU0sSUFBSSxTQUFTLElBQUksTUFBTSxFQUFFO1FBQzVCLEtBQUssR0FBRyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0IsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDN0I7U0FBTSxFQUFFLFVBQVU7UUFDZixLQUFLLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ2xDO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQztBQUdEOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxLQUFVLEVBQUUsRUFBZ0IsRUFBRSxFQUFZLEVBQUUsUUFBYTtJQUN2RixFQUFFLEdBQUcsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RCLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUNkLFFBQVEsRUFBRSxFQUFFO1FBQ1IsS0FBSyxZQUFZLENBQUMsUUFBUTtZQUN0QixDQUFDLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNqRSxNQUFNO1FBQ1YsS0FBSyxZQUFZLENBQUMsYUFBYTtZQUMzQixDQUFDLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNsRSxNQUFNO1FBQ1YsS0FBSyxZQUFZLENBQUMsS0FBSztZQUNuQixDQUFDLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNsRSxNQUFNO1FBQ1YsS0FBSyxZQUFZLENBQUMsUUFBUTtZQUN0QixDQUFDLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNsRSxNQUFNO1FBQ1YsS0FBSyxZQUFZLENBQUMsV0FBVztZQUN6QixDQUFDLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNqRSxNQUFNO1FBQ1YsS0FBSyxZQUFZLENBQUMsZ0JBQWdCO1lBQzlCLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLElBQUksZ0JBQWdCLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ2xFLE1BQU07UUFDVixLQUFLLFlBQVksQ0FBQyxPQUFPO1lBQ3JCLENBQUMsR0FBSSxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFZLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzFGLE1BQU07UUFDVixLQUFLLFlBQVksQ0FBQyxVQUFVO1lBQ3hCLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzlFLE1BQU07UUFDVixLQUFLLFlBQVksQ0FBQyxTQUFTO1lBQ3ZCLENBQUMsR0FBSSxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFZLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3ZGLE1BQU07UUFDVixLQUFLLFlBQVksQ0FBQyxPQUFPO1lBQ3JCLENBQUMsR0FBSSxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFZLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3JGLE1BQU07UUFDVjtZQUNJLE1BQU07S0FDYjtJQUVELE9BQU8sQ0FBQyxDQUFDO0FBQ2IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElUeXBlRGVmLCBzYWZlUGFyc2VCb29sLCBzYWZlUGFyc2VGbG9hdCwgc2FmZVBhcnNlSW50LCBzYWZlUGFyc2VTdHJpbmcsIHR5Qm9vbCwgdHlEYXRlLCB0eU51bWJlciB9IGZyb20gJ0Bwb2xwd2FyZS9mZS11dGlsaXRpZXMnO1xuaW1wb3J0IHsgT3BlcmF0b3JFbnVtIH0gZnJvbSAnLi9iaW5hcnktb3BlcmF0b3JzJztcblxuXG4vKipcbiAqIENvbXB1dGVzIHRoZSB0eXBlIHNhZmUgdmFsdWUgaW4gSmF2YXNjcmlwdC5cbiAqIEBwYXJhbSB2YWx1ZVxuICogQHBhcmFtIHZhbHVlVHlwZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHlwZVNhZmVWYWx1ZSh2YWx1ZTogYW55LCB2YWx1ZVR5cGU6IElUeXBlRGVmKSB7XG4gICAgaWYgKHZhbHVlVHlwZSA9PSB0eUJvb2wpIHtcbiAgICAgICAgdmFsdWUgPSBzYWZlUGFyc2VCb29sKHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlVHlwZSA9PSB0eU51bWJlcikge1xuICAgICAgICB2YWx1ZSA9IHNhZmVQYXJzZUZsb2F0KHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlVHlwZSA9PSB0eURhdGUpIHtcbiAgICAgICAgdmFsdWUgPSBzYWZlUGFyc2VTdHJpbmcodmFsdWUpO1xuICAgICAgICB2YWx1ZSA9IERhdGUucGFyc2UodmFsdWUpO1xuICAgIH0gZWxzZSB7IC8vIHN0cmluZyBcbiAgICAgICAgdmFsdWUgPSBzYWZlUGFyc2VTdHJpbmcodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5cblxuLyoqXG4gKiBFdmFsdXRlcyB0aGUgZ2l2ZW4gYXNzZXJ0aW9uIGlmIGl0IGhvbGRzLlxuICogQHBhcmFtIHZhbHVlXG4gKiBAcGFyYW0gb3BcbiAqIEBwYXJhbSB0eVxuICogQHBhcmFtIGV4cGVjdGVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBldmFsdWF0ZUFzc2VydGlvbih2YWx1ZTogYW55LCBvcDogT3BlcmF0b3JFbnVtLCB0eTogSVR5cGVEZWYsIGV4cGVjdGVkOiBhbnkpOiBib29sZWFuIHtcbiAgICBvcCA9IHNhZmVQYXJzZUludChvcCk7XG4gICAgbGV0IHMgPSBmYWxzZTtcbiAgICBzd2l0Y2ggKG9wKSB7XG4gICAgICAgIGNhc2UgT3BlcmF0b3JFbnVtLkxlc3NUaGFuOlxuICAgICAgICAgICAgcyA9IGdldFR5cGVTYWZlVmFsdWUodmFsdWUsIHR5KSA8IGdldFR5cGVTYWZlVmFsdWUoZXhwZWN0ZWQsIHR5KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE9wZXJhdG9yRW51bS5MZXNzVGhhbkVxdWFsOlxuICAgICAgICAgICAgcyA9IGdldFR5cGVTYWZlVmFsdWUodmFsdWUsIHR5KSA8PSBnZXRUeXBlU2FmZVZhbHVlKGV4cGVjdGVkLCB0eSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBPcGVyYXRvckVudW0uRXF1YWw6XG4gICAgICAgICAgICBzID0gZ2V0VHlwZVNhZmVWYWx1ZSh2YWx1ZSwgdHkpID09IGdldFR5cGVTYWZlVmFsdWUoZXhwZWN0ZWQsIHR5KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE9wZXJhdG9yRW51bS5Ob3RFcXVhbDpcbiAgICAgICAgICAgIHMgPSBnZXRUeXBlU2FmZVZhbHVlKHZhbHVlLCB0eSkgIT0gZ2V0VHlwZVNhZmVWYWx1ZShleHBlY3RlZCwgdHkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgT3BlcmF0b3JFbnVtLkdyZWF0ZXJUaGFuOlxuICAgICAgICAgICAgcyA9IGdldFR5cGVTYWZlVmFsdWUodmFsdWUsIHR5KSA+IGdldFR5cGVTYWZlVmFsdWUoZXhwZWN0ZWQsIHR5KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE9wZXJhdG9yRW51bS5HcmVhdGVyVGhhbkVxdWFsOlxuICAgICAgICAgICAgcyA9IGdldFR5cGVTYWZlVmFsdWUodmFsdWUsIHR5KSA+PSBnZXRUeXBlU2FmZVZhbHVlKGV4cGVjdGVkLCB0eSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBPcGVyYXRvckVudW0uQ29udGFpbjpcbiAgICAgICAgICAgIHMgPSAoZ2V0VHlwZVNhZmVWYWx1ZSh2YWx1ZSwgdHkpIGFzIHN0cmluZykuaW5kZXhPZihnZXRUeXBlU2FmZVZhbHVlKGV4cGVjdGVkLCB0eSkpICE9IC0xO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgT3BlcmF0b3JFbnVtLk5vdENvbnRhaW46XG4gICAgICAgICAgICBzID0gZ2V0VHlwZVNhZmVWYWx1ZSh2YWx1ZSwgdHkpLmluZGV4T2YoZ2V0VHlwZVNhZmVWYWx1ZShleHBlY3RlZCwgdHkpKSA9PSAtMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE9wZXJhdG9yRW51bS5TdGFydFdpdGg6XG4gICAgICAgICAgICBzID0gKGdldFR5cGVTYWZlVmFsdWUodmFsdWUsIHR5KSBhcyBzdHJpbmcpLnN0YXJ0c1dpdGgoZ2V0VHlwZVNhZmVWYWx1ZShleHBlY3RlZCwgdHkpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE9wZXJhdG9yRW51bS5FbmRXaXRoOlxuICAgICAgICAgICAgcyA9IChnZXRUeXBlU2FmZVZhbHVlKHZhbHVlLCB0eSkgYXMgc3RyaW5nKS5lbmRzV2l0aChnZXRUeXBlU2FmZVZhbHVlKGV4cGVjdGVkLCB0eSkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICByZXR1cm4gcztcbn1cbiJdfQ==