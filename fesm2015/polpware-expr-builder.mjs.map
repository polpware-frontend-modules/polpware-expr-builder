{"version":3,"file":"polpware-expr-builder.mjs","sources":["../../../../projects/polpware/expr-builder/src/lib/binary-operators.ts","../../../../projects/polpware/expr-builder/src/lib/csharp-translator.ts","../../../../projects/polpware/expr-builder/src/lib/js-evaluator.ts","../../../../projects/polpware/expr-builder/src/public-api.ts","../../../../projects/polpware/expr-builder/src/polpware-expr-builder.ts"],"sourcesContent":["import { tyBool, tyNull, tyUndefined, tyNumber, tyString, tyDate, tySymbol, tyObject, tyArray, tyFunction } from '@polpware/fe-utilities';\n\nexport enum OperatorEnum {\n    Undefined = 0,\n    LessThan,\n    LessThanEqual,\n    Equal,\n    NotEqual,\n    GreaterThan,\n    GreaterThanEqual,\n\n    Contain,\n    NotContain,\n    StartWith,\n    EndWith\n}\n\nexport const OperatorOptions4Number = [\n    {\n        text: '<',\n        value: OperatorEnum.LessThan\n    }, {\n        text: '<=',\n        value: OperatorEnum.LessThanEqual\n    }, {\n        text: '==',\n        value: OperatorEnum.Equal\n    }, {\n        text: '!=',\n        value: OperatorEnum.NotEqual\n    }, {\n        text: '>',\n        value: OperatorEnum.GreaterThan\n    }, {\n        text: '>=',\n        value: OperatorEnum.GreaterThanEqual\n    }\n];\n\n\nexport const OperatorOptions4Bool = [\n    {\n        text: '==',\n        value: OperatorEnum.Equal\n    }, {\n        text: '!=',\n        value: OperatorEnum.NotEqual\n    }\n];\n\nexport const OperatorOptions4Text = [\n    {\n        text: 'Contains',\n        value: OperatorEnum.Contain\n    }, {\n        text: 'Contains no',\n        value: OperatorEnum.NotContain\n    }, {\n        text: 'Starts with',\n        value: OperatorEnum.StartWith\n    }, {\n        text: 'Ends with',\n        value: OperatorEnum.EndWith\n    }, {\n        text: '<',\n        value: OperatorEnum.LessThan\n    }, {\n        text: '<=',\n        value: OperatorEnum.LessThanEqual\n    }, {\n        text: '==',\n        value: OperatorEnum.Equal\n    }, {\n        text: '!=',\n        value: OperatorEnum.NotEqual\n    }, {\n        text: '>',\n        value: OperatorEnum.GreaterThan\n    }, {\n        text: '>=',\n        value: OperatorEnum.GreaterThanEqual\n    }\n];\n\n/**\n * Translates the given string into a operator value.\n * Note that this method is expected to be invoked when  \n * parsing a dataflow or report. \n * Thus, the input value is well-defined and must be \n * one of the given value. \n * @param op\n */\nexport function translateStringToOperator(op: string) {\n    switch (op) {\n        case '<':\n            return OperatorEnum.LessThan;\n        case '<=':\n            return OperatorEnum.LessThanEqual;\n        case '==':\n            return OperatorEnum.Equal;\n        case '!=':\n            return OperatorEnum.NotEqual;\n        case '>':\n            return OperatorEnum.GreaterThan;\n        case '>=':\n            return OperatorEnum.GreaterThanEqual;\n        case 'Contains':\n            return OperatorEnum.Contain;\n        case 'DoesNotContain':\n            return OperatorEnum.NotContain;\n        case 'StartsWith':\n            return OperatorEnum.StartWith;\n        case 'EndsWith':\n            return OperatorEnum.EndWith;\n        default:\n            return OperatorEnum.Undefined;\n    }\n}\n\n/**\n * Translates the given into a JavaSrcipt type.\n * @param ty\n */\nexport function translateStringToType(ty: string) {\n    switch (ty) {\n        case 'tyBool':\n            return tyBool;\n        case 'tyNull':\n            return tyNull;\n        case 'tyUndefined':\n            return tyUndefined;\n        case 'tyNumber':\n            return tyNumber;\n        case 'tyString':\n            return tyString;\n        case 'tyDate':\n            return tyDate;\n        case 'tySymbol':\n            return tySymbol;\n        case 'tyObject':\n            return tyObject;\n        case 'tyArray':\n            return tyArray;\n        case 'tyFunction':\n            return tyFunction;\n        default:\n            return tyString;\n    }\n}\n","import { ITypeDef, safeParseBool, safeParseFloat, safeParseInt, safeParseString, tyBool, tyDate, tyNumber, tyString } from '@polpware/fe-utilities';\nimport { OperatorEnum } from './binary-operators';\n\n/**\n * Translates into a string format for C#.\n * @param op\n * @param ty\n */\nexport function interpretOperator(op: OperatorEnum, ty: ITypeDef) {\n    op = safeParseInt(op);\n    let s = '';\n    switch (op) {\n        case OperatorEnum.LessThan:\n            if (ty == tyString) {\n                s = 'String.Compare({left}, {right}, true) < 0';\n            } else {\n                s = '{left} < {right}';\n            }\n\n            break;\n        case OperatorEnum.LessThanEqual:\n            if (ty == tyString) {\n                s = 'String.Compare({left}, {right}, true) <= 0';\n            } else {\n                s = '{left} <= {right}';\n            }\n\n            break;\n        case OperatorEnum.Equal:\n            if (ty == tyString) {\n                s = 'String.Compare({left}, {right}, true) == 0';\n            } else {\n                s = '{left} == {right}';\n            }\n\n            break;\n        case OperatorEnum.NotEqual:\n            if (ty == tyString) {\n                s = 'String.Compare({left}, {right}, true) != 0';\n            } else {\n                s = '{left} != {right}';\n            }\n\n            break;\n        case OperatorEnum.GreaterThan:\n            if (ty == tyString) {\n                s = 'String.Compare({left}, {right}, true) > 0';\n            } else {\n                s = '{left} > {right}';\n            }\n\n            break;\n        case OperatorEnum.GreaterThanEqual:\n            if (ty == tyString) {\n                s = 'String.Compare({left}, {right}, true) >= 0';\n            } else {\n                s = '{left} >= {right}';\n            }\n\n            break;\n        case OperatorEnum.Contain:\n            s = '{left}.IndexOf({right}) != -1';\n            break;\n        case OperatorEnum.NotContain:\n            s = '{left}.IndexOf({right}) == -1';\n            break;\n        case OperatorEnum.StartWith:\n            s = '{left}.StartsWith({right})';\n            break;\n        case OperatorEnum.EndWith:\n            s = '{left}.EndsWith({right})';\n            break;\n        default:\n            s = '';\n            break;\n    }\n\n    return s;\n}\n\n/**\n * Computes the representation for the given value with the given type. \n * The given value is a known value, and it can be of one of many types. \n * Typically, the value is directly obtained from the user input in Form. \n *\n * Our goal is product a valid C# expression for the given value, while repsecting \n * the type information of the value. \n * \n * The representation is a valid C# expression. \n * @param value\n * @param valueType\n */\nexport function getTypeSafeValueRep(value: any, valueType: ITypeDef) {\n    if (valueType == tyBool) {\n        value = safeParseBool(value);\n    } else if (valueType == tyNumber) {\n        value = safeParseFloat(value);\n    } else if (valueType == tyDate) {\n        value = safeParseString(value);\n        value = '\"' + value + '\"';\n        value = `DateTime.Parse(${value})`;\n    } else { // string \n        value = safeParseString(value);\n        value = '\"' + value + '\"';\n    }\n    return value;\n}\n\n/**\n * Build the right type convertor (in C#) for the given variable (a string) \n * with the given type information. \n * \n * What is different from the above is that the above generates a valid literal from \n * a given known value. \n * \n * In contrast, the given value in this method is a variable (a string), we have to generate \n * a right type cast for the given string to produce a type safe value at run time. \n * Therefore, \n *   - we do not quote the given value. \n * @param varName\n * @param varType\n */\nexport function buildTypeConvertor(varName: string, varType: ITypeDef) {\n    if (varType == tyBool) {\n        varName = `bool.Parse(${varName})`;\n    } else if (varType == tyNumber) {\n        varName = `double.Parse(${varName})`;\n    } else if (varType == tyDate) {\n        varName = `DateTime.Parse(${varName})`;\n    }\n    return varName;\n}\n","import { ITypeDef, safeParseBool, safeParseFloat, safeParseInt, safeParseString, tyBool, tyDate, tyNumber } from '@polpware/fe-utilities';\nimport { OperatorEnum } from './binary-operators';\n\n\n/**\n * Computes the type safe value in Javascript.\n * @param value\n * @param valueType\n */\nexport function getTypeSafeValue(value: any, valueType: ITypeDef) {\n    if (valueType == tyBool) {\n        value = safeParseBool(value);\n    } else if (valueType == tyNumber) {\n        value = safeParseFloat(value);\n    } else if (valueType == tyDate) {\n        value = safeParseString(value);\n        value = Date.parse(value);\n    } else { // string \n        value = safeParseString(value);\n    }\n    return value;\n}\n\n\n/**\n * Evalutes the given assertion if it holds.\n * @param value\n * @param op\n * @param ty\n * @param expected\n */\nexport function evaluateAssertion(value: any, op: OperatorEnum, ty: ITypeDef, expected: any): boolean {\n    op = safeParseInt(op);\n    let s = false;\n    switch (op) {\n        case OperatorEnum.LessThan:\n            s = getTypeSafeValue(value, ty) < getTypeSafeValue(expected, ty);\n            break;\n        case OperatorEnum.LessThanEqual:\n            s = getTypeSafeValue(value, ty) <= getTypeSafeValue(expected, ty);\n            break;\n        case OperatorEnum.Equal:\n            s = getTypeSafeValue(value, ty) == getTypeSafeValue(expected, ty);\n            break;\n        case OperatorEnum.NotEqual:\n            s = getTypeSafeValue(value, ty) != getTypeSafeValue(expected, ty);\n            break;\n        case OperatorEnum.GreaterThan:\n            s = getTypeSafeValue(value, ty) > getTypeSafeValue(expected, ty);\n            break;\n        case OperatorEnum.GreaterThanEqual:\n            s = getTypeSafeValue(value, ty) >= getTypeSafeValue(expected, ty);\n            break;\n        case OperatorEnum.Contain:\n            s = (getTypeSafeValue(value, ty) as string).indexOf(getTypeSafeValue(expected, ty)) != -1;\n            break;\n        case OperatorEnum.NotContain:\n            s = getTypeSafeValue(value, ty).indexOf(getTypeSafeValue(expected, ty)) == -1;\n            break;\n        case OperatorEnum.StartWith:\n            s = (getTypeSafeValue(value, ty) as string).startsWith(getTypeSafeValue(expected, ty));\n            break;\n        case OperatorEnum.EndWith:\n            s = (getTypeSafeValue(value, ty) as string).endsWith(getTypeSafeValue(expected, ty));\n            break;\n        default:\n            break;\n    }\n\n    return s;\n}\n","/*\n * Public API Surface of expr-builder\n */\n\nexport * from './lib/binary-operators';\nexport * from './lib/csharp-translator';\nexport * from './lib/js-evaluator';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}