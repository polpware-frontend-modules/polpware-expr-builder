import { safeParseBool, safeParseFloat, safeParseInt, safeParseString, tyBool, tyDate, tyNumber } from '@polpware/fe-utilities';
import { OperatorEnum } from './binary-operators';
/**
 * Computes the type safe value in Javascript.
 * @param value
 * @param valueType
 */
export function getTypeSafeValue(value, valueType) {
    if (valueType == tyBool) {
        value = safeParseBool(value);
    }
    else if (valueType == tyNumber) {
        value = safeParseFloat(value);
    }
    else if (valueType == tyDate) {
        value = safeParseString(value);
        value = Date.parse(value);
    }
    else { // string 
        value = safeParseString(value);
    }
    return value;
}
/**
 * Evalutes the given assertion if it holds.
 * @param value
 * @param op
 * @param ty
 * @param expected
 */
export function evaluateAssertion(value, op, ty, expected) {
    op = safeParseInt(op);
    let s = false;
    switch (op) {
        case OperatorEnum.LessThan:
            s = getTypeSafeValue(value, ty) < getTypeSafeValue(expected, ty);
            break;
        case OperatorEnum.LessThanEqual:
            s = getTypeSafeValue(value, ty) <= getTypeSafeValue(expected, ty);
            break;
        case OperatorEnum.Equal:
            s = getTypeSafeValue(value, ty) == getTypeSafeValue(expected, ty);
            break;
        case OperatorEnum.NotEqual:
            s = getTypeSafeValue(value, ty) != getTypeSafeValue(expected, ty);
            break;
        case OperatorEnum.GreaterThan:
            s = getTypeSafeValue(value, ty) > getTypeSafeValue(expected, ty);
            break;
        case OperatorEnum.GreaterThanEqual:
            s = getTypeSafeValue(value, ty) >= getTypeSafeValue(expected, ty);
            break;
        case OperatorEnum.Contain:
            s = getTypeSafeValue(value, ty).indexOf(getTypeSafeValue(expected, ty)) != -1;
            break;
        case OperatorEnum.NotContain:
            s = getTypeSafeValue(value, ty).indexOf(getTypeSafeValue(expected, ty)) == -1;
            break;
        case OperatorEnum.StartWith:
            s = getTypeSafeValue(value, ty).startsWith(getTypeSafeValue(expected, ty));
            break;
        case OperatorEnum.EndWith:
            s = getTypeSafeValue(value, ty).endsWith(getTypeSafeValue(expected, ty));
            break;
        default:
            break;
    }
    return s;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianMtZXZhbHVhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcG9scHdhcmUvZXhwci1idWlsZGVyL3NyYy9saWIvanMtZXZhbHVhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBWSxhQUFhLEVBQUUsY0FBYyxFQUFFLFlBQVksRUFBRSxlQUFlLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMxSSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFHbEQ7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxLQUFVLEVBQUUsU0FBbUI7SUFDNUQsSUFBSSxTQUFTLElBQUksTUFBTSxFQUFFO1FBQ3JCLEtBQUssR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDaEM7U0FBTSxJQUFJLFNBQVMsSUFBSSxRQUFRLEVBQUU7UUFDOUIsS0FBSyxHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNqQztTQUFNLElBQUksU0FBUyxJQUFJLE1BQU0sRUFBRTtRQUM1QixLQUFLLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9CLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzdCO1NBQU0sRUFBRSxVQUFVO1FBQ2YsS0FBSyxHQUFHLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNsQztJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2pCLENBQUM7QUFHRDs7Ozs7O0dBTUc7QUFDSCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsS0FBVSxFQUFFLEVBQWdCLEVBQUUsRUFBWSxFQUFFLFFBQWE7SUFDdkYsRUFBRSxHQUFHLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN0QixJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDZCxRQUFRLEVBQUUsRUFBRTtRQUNSLEtBQUssWUFBWSxDQUFDLFFBQVE7WUFDdEIsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDakUsTUFBTTtRQUNWLEtBQUssWUFBWSxDQUFDLGFBQWE7WUFDM0IsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDbEUsTUFBTTtRQUNWLEtBQUssWUFBWSxDQUFDLEtBQUs7WUFDbkIsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDbEUsTUFBTTtRQUNWLEtBQUssWUFBWSxDQUFDLFFBQVE7WUFDdEIsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDbEUsTUFBTTtRQUNWLEtBQUssWUFBWSxDQUFDLFdBQVc7WUFDekIsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDakUsTUFBTTtRQUNWLEtBQUssWUFBWSxDQUFDLGdCQUFnQjtZQUM5QixDQUFDLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNsRSxNQUFNO1FBQ1YsS0FBSyxZQUFZLENBQUMsT0FBTztZQUNyQixDQUFDLEdBQUksZ0JBQWdCLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBWSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUMxRixNQUFNO1FBQ1YsS0FBSyxZQUFZLENBQUMsVUFBVTtZQUN4QixDQUFDLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUM5RSxNQUFNO1FBQ1YsS0FBSyxZQUFZLENBQUMsU0FBUztZQUN2QixDQUFDLEdBQUksZ0JBQWdCLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBWSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN2RixNQUFNO1FBQ1YsS0FBSyxZQUFZLENBQUMsT0FBTztZQUNyQixDQUFDLEdBQUksZ0JBQWdCLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBWSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNyRixNQUFNO1FBQ1Y7WUFDSSxNQUFNO0tBQ2I7SUFFRCxPQUFPLENBQUMsQ0FBQztBQUNiLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJVHlwZURlZiwgc2FmZVBhcnNlQm9vbCwgc2FmZVBhcnNlRmxvYXQsIHNhZmVQYXJzZUludCwgc2FmZVBhcnNlU3RyaW5nLCB0eUJvb2wsIHR5RGF0ZSwgdHlOdW1iZXIgfSBmcm9tICdAcG9scHdhcmUvZmUtdXRpbGl0aWVzJztcbmltcG9ydCB7IE9wZXJhdG9yRW51bSB9IGZyb20gJy4vYmluYXJ5LW9wZXJhdG9ycyc7XG5cblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgdHlwZSBzYWZlIHZhbHVlIGluIEphdmFzY3JpcHQuXG4gKiBAcGFyYW0gdmFsdWVcbiAqIEBwYXJhbSB2YWx1ZVR5cGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFR5cGVTYWZlVmFsdWUodmFsdWU6IGFueSwgdmFsdWVUeXBlOiBJVHlwZURlZikge1xuICAgIGlmICh2YWx1ZVR5cGUgPT0gdHlCb29sKSB7XG4gICAgICAgIHZhbHVlID0gc2FmZVBhcnNlQm9vbCh2YWx1ZSk7XG4gICAgfSBlbHNlIGlmICh2YWx1ZVR5cGUgPT0gdHlOdW1iZXIpIHtcbiAgICAgICAgdmFsdWUgPSBzYWZlUGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgfSBlbHNlIGlmICh2YWx1ZVR5cGUgPT0gdHlEYXRlKSB7XG4gICAgICAgIHZhbHVlID0gc2FmZVBhcnNlU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgdmFsdWUgPSBEYXRlLnBhcnNlKHZhbHVlKTtcbiAgICB9IGVsc2UgeyAvLyBzdHJpbmcgXG4gICAgICAgIHZhbHVlID0gc2FmZVBhcnNlU3RyaW5nKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5cbi8qKlxuICogRXZhbHV0ZXMgdGhlIGdpdmVuIGFzc2VydGlvbiBpZiBpdCBob2xkcy5cbiAqIEBwYXJhbSB2YWx1ZVxuICogQHBhcmFtIG9wXG4gKiBAcGFyYW0gdHlcbiAqIEBwYXJhbSBleHBlY3RlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gZXZhbHVhdGVBc3NlcnRpb24odmFsdWU6IGFueSwgb3A6IE9wZXJhdG9yRW51bSwgdHk6IElUeXBlRGVmLCBleHBlY3RlZDogYW55KTogYm9vbGVhbiB7XG4gICAgb3AgPSBzYWZlUGFyc2VJbnQob3ApO1xuICAgIGxldCBzID0gZmFsc2U7XG4gICAgc3dpdGNoIChvcCkge1xuICAgICAgICBjYXNlIE9wZXJhdG9yRW51bS5MZXNzVGhhbjpcbiAgICAgICAgICAgIHMgPSBnZXRUeXBlU2FmZVZhbHVlKHZhbHVlLCB0eSkgPCBnZXRUeXBlU2FmZVZhbHVlKGV4cGVjdGVkLCB0eSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBPcGVyYXRvckVudW0uTGVzc1RoYW5FcXVhbDpcbiAgICAgICAgICAgIHMgPSBnZXRUeXBlU2FmZVZhbHVlKHZhbHVlLCB0eSkgPD0gZ2V0VHlwZVNhZmVWYWx1ZShleHBlY3RlZCwgdHkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgT3BlcmF0b3JFbnVtLkVxdWFsOlxuICAgICAgICAgICAgcyA9IGdldFR5cGVTYWZlVmFsdWUodmFsdWUsIHR5KSA9PSBnZXRUeXBlU2FmZVZhbHVlKGV4cGVjdGVkLCB0eSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBPcGVyYXRvckVudW0uTm90RXF1YWw6XG4gICAgICAgICAgICBzID0gZ2V0VHlwZVNhZmVWYWx1ZSh2YWx1ZSwgdHkpICE9IGdldFR5cGVTYWZlVmFsdWUoZXhwZWN0ZWQsIHR5KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE9wZXJhdG9yRW51bS5HcmVhdGVyVGhhbjpcbiAgICAgICAgICAgIHMgPSBnZXRUeXBlU2FmZVZhbHVlKHZhbHVlLCB0eSkgPiBnZXRUeXBlU2FmZVZhbHVlKGV4cGVjdGVkLCB0eSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBPcGVyYXRvckVudW0uR3JlYXRlclRoYW5FcXVhbDpcbiAgICAgICAgICAgIHMgPSBnZXRUeXBlU2FmZVZhbHVlKHZhbHVlLCB0eSkgPj0gZ2V0VHlwZVNhZmVWYWx1ZShleHBlY3RlZCwgdHkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgT3BlcmF0b3JFbnVtLkNvbnRhaW46XG4gICAgICAgICAgICBzID0gKGdldFR5cGVTYWZlVmFsdWUodmFsdWUsIHR5KSBhcyBzdHJpbmcpLmluZGV4T2YoZ2V0VHlwZVNhZmVWYWx1ZShleHBlY3RlZCwgdHkpKSAhPSAtMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE9wZXJhdG9yRW51bS5Ob3RDb250YWluOlxuICAgICAgICAgICAgcyA9IGdldFR5cGVTYWZlVmFsdWUodmFsdWUsIHR5KS5pbmRleE9mKGdldFR5cGVTYWZlVmFsdWUoZXhwZWN0ZWQsIHR5KSkgPT0gLTE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBPcGVyYXRvckVudW0uU3RhcnRXaXRoOlxuICAgICAgICAgICAgcyA9IChnZXRUeXBlU2FmZVZhbHVlKHZhbHVlLCB0eSkgYXMgc3RyaW5nKS5zdGFydHNXaXRoKGdldFR5cGVTYWZlVmFsdWUoZXhwZWN0ZWQsIHR5KSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBPcGVyYXRvckVudW0uRW5kV2l0aDpcbiAgICAgICAgICAgIHMgPSAoZ2V0VHlwZVNhZmVWYWx1ZSh2YWx1ZSwgdHkpIGFzIHN0cmluZykuZW5kc1dpdGgoZ2V0VHlwZVNhZmVWYWx1ZShleHBlY3RlZCwgdHkpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIHM7XG59XG4iXX0=